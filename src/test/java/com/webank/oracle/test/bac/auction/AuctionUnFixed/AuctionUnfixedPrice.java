package com.webank.oracle.test.bac.auction.AuctionUnFixed;

import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Bool;
import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.generated.Bytes4;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint128;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.crypto.EncryptType;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tuples.generated.Tuple4;
import org.fisco.bcos.web3j.tuples.generated.Tuple5;
import org.fisco.bcos.web3j.tuples.generated.Tuple7;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class AuctionUnfixedPrice extends Contract {
    public static final String[] BINARY_ARRAY = {"608060405234801561001057600080fd5b506122f1806100206000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630f41ba4b1461009e57806331f6f50e146100ba5780637bed7232146100f75780639167657614610120578063b4598d8214610149578063c73d16ae14610187578063cdbd4d01146101c4578063dd768922146101ed578063ea28a5ae1461022a575b600080fd5b6100b860048036036100b39190810190611df7565b61026d565b005b3480156100c657600080fd5b506100e160048036036100dc9190810190611c7a565b610843565b6040516100ee91906120ba565b60405180910390f35b34801561010357600080fd5b5061011e60048036036101199190810190611cf5565b610873565b005b34801561012c57600080fd5b5061014760048036036101429190810190611d80565b610e5d565b005b34801561015557600080fd5b50610170600480360361016b9190810190611cf5565b611277565b60405161017e929190612150565b60405180910390f35b34801561019357600080fd5b506101ae60048036036101a99190810190611c7a565b611557565b6040516101bb91906120ba565b60405180910390f35b3480156101d057600080fd5b506101eb60048036036101e69190810190611cf5565b611587565b005b3480156101f957600080fd5b50610214600480360361020f9190810190611d31565b6118fc565b6040516102219190612135565b60405180910390f35b34801561023657600080fd5b50610251600480360361024c9190810190611cf5565b61192e565b604051610264979695949392919061200f565b60405180910390f35b60008060008060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002092508260010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16841015151561030457600080fd5b8260050160149054906101000a900460ff16151561032157600080fd5b428360020154111515610369576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036090612115565b60405180910390fd5b600091506000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115610542578260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639bd9bbc633600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161050b92919061207e565b600060405180830381600087803b15801561052557600080fd5b505af1158015610539573d6000803e3d6000fd5b50505050600191505b83600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e7d6113330876040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161065193929190611fc5565b600060405180830381600087803b15801561066b57600080fd5b505af115801561067f573d6000803e3d6000fd5b505050506000836006018054905014156106e457838360040181905550338360050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061079d565b6001836006018054905003905083836006018281548110151561070357fe5b9060005260206000200154101515610750576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610747906120d5565b60405180910390fd5b838360040181905550338360050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b81151561083b57826007013390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050826006018490806001815401808255809150509060018203906000526020600020016000909192909190915055505b505050505050565b60006331f6f50e7c0100000000000000000000000000000000000000000000000000000000029050949350505050565b6000806000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020915042826002015411151515610910576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610907906120f5565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561096e57600080fd5b8160050160149054906101000a900460ff16151561098b57600080fd5b60008260050160146101000a81548160ff021916908315150217905550600082600601805490501415610a6c578373ffffffffffffffffffffffffffffffffffffffff1663d0e7d611308460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a3593929190611f7b565b600060405180830381600087803b158015610a4f57600080fd5b505af1158015610a63573d6000803e3d6000fd5b50505050610e57565b8160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639bd9bbc68360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600401546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610b0f92919061207e565b600060405180830381600087803b158015610b2957600080fd5b505af1158015610b3d573d6000803e3d6000fd5b50505050600090505b8160070180549050811015610da7578160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260070182815481101515610ba157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610d9a578160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639bd9bbc68360070183815481101515610c3a57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060008660070186815481101515610cc857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d6792919061207e565b600060405180830381600087803b158015610d8157600080fd5b505af1158015610d95573d6000803e3d6000fd5b505050505b8080600101915050610b46565b8373ffffffffffffffffffffffffffffffffffffffff1663d0e7d611308460050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e2493929190611f7b565b600060405180830381600087803b158015610e3e57600080fd5b505af1158015610e52573d6000803e3d6000fd5b505050505b50505050565b610e65611a06565b60008073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515610ea257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614151515610ede57600080fd5b6000846fffffffffffffffffffffffffffffffff16111515610eff57600080fd5b600083111515610f0e57600080fd5b610120604051908101604052803373ffffffffffffffffffffffffffffffffffffffff168152602001856fffffffffffffffffffffffffffffffff1681526020018481526020018673ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016001151581526020016000604051908082528060200260200182016040528015610fce5781602001602082028038833980820191505090505b5081526020016000604051908082528060","","830185611e73565b611ff46040830184611f6c565b818103606083015261200581611f16565b9050949350505050565b600060e082019050612024600083018a611e46565b6120316020830189611f5d565b61203e6040830188611f6c565b61204b6060830187611e46565b6120586080830186611f6c565b61206560a0830185611e46565b61207260c0830184611e55565b98975050505050505050565b60006060820190506120936000830185611e46565b6120a06020830184611f6c565b81810360408301526120b181611f16565b90509392505050565b60006020820190506120cf6000830184611e64565b92915050565b600060208201905081810360008301526120ee81611e82565b9050919050565b6000602082019050818103600083015261210e81611edf565b9050919050565b6000602082019050818103600083015261212e81611f26565b9050919050565b600060208201905061214a6000830184611f6c565b92915050565b60006040820190506121656000830185611f6c565b6121726020830184611e46565b9392505050565b6000604051905081810181811067ffffffffffffffff8211171561219c57600080fd5b8060405250919050565b600067ffffffffffffffff8211156121bd57600080fd5b601f19601f8301169050602081019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006122a1826121d2565b9050919050565b828183376000838301525050505600a265627a7a72305820b09ce1b5119ebfaa0c725e4b650e619c86512a9437e35871c4002810cc4101976c6578706572696d656e74616cf50037"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"_nft\",\"type\":\"address\"},{\"name\":\"_nftAssetId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onBAC002Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nft\",\"type\":\"address\"},{\"name\":\"_nftAssetId\",\"type\":\"uint256\"}],\"name\":\"executeSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nft\",\"type\":\"address\"},{\"name\":\"_nftAssetId\",\"type\":\"uint256\"},{\"name\":\"_ftAssetAddress\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint128\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createNFTAssetAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nft\",\"type\":\"address\"},{\"name\":\"_nftAssetId\",\"type\":\"uint256\"}],\"name\":\"getNFTAssetAuctionDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onBAC001Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nft\",\"type\":\"address\"},{\"name\":\"_nftAssetId\",\"type\":\"uint256\"}],\"name\":\"cancelAution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bids\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftAssetToAuction\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint128\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"ftAssetAddress\",\"type\":\"address\"},{\"name\":\"maxBid\",\"type\":\"uint256\"},{\"name\":\"maxBidUser\",\"type\":\"address\"},{\"name\":\"isActive\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String[] SM_BINARY_ARRAY = {"","","830185611e73565b611ff46040830184611f6c565b818103606083015261200581611e82565b9050949350505050565b600060e082019050612024600083018a611e46565b6120316020830189611f5d565b61203e6040830188611f6c565b61204b6060830187611e46565b6120586080830186611f6c565b61206560a0830185611e46565b61207260c0830184611e55565b98975050505050505050565b60006060820190506120936000830185611e46565b6120a06020830184611f6c565b81810360408301526120b181611e82565b90509392505050565b60006020820190506120cf6000830184611e64565b92915050565b600060208201905081810360008301526120ee81611e92565b9050919050565b6000602082019050818103600083015261210e81611eef565b9050919050565b6000602082019050818103600083015261212e81611f26565b9050919050565b600060208201905061214a6000830184611f6c565b92915050565b60006040820190506121656000830185611f6c565b6121726020830184611e46565b9392505050565b6000604051905081810181811067ffffffffffffffff8211171561219c57600080fd5b8060405250919050565b600067ffffffffffffffff8211156121bd57600080fd5b601f19601f8301169050602081019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006122a1826121d2565b9050919050565b828183376000838301525050505600a265627a7a72305820e9290535c79343b2f9e32350e8149186cb1014e007f5a59041508ba8ebb5e2f46c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String FUNC_BID = "bid";

    public static final String FUNC_ONBAC002RECEIVED = "onBAC002Received";

    public static final String FUNC_EXECUTESALE = "executeSale";

    public static final String FUNC_CREATENFTASSETAUCTION = "createNFTAssetAuction";

    public static final String FUNC_GETNFTASSETAUCTIONDETAILS = "getNFTAssetAuctionDetails";

    public static final String FUNC_ONBAC001RECEIVED = "onBAC001Received";

    public static final String FUNC_CANCELAUTION = "cancelAution";

    public static final String FUNC_BIDS = "bids";

    public static final String FUNC_NFTASSETTOAUCTION = "nftAssetToAuction";

    @Deprecated
    protected AuctionUnfixedPrice(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(getBinary(), contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AuctionUnfixedPrice(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(getBinary(), contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AuctionUnfixedPrice(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(getBinary(), contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AuctionUnfixedPrice(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(getBinary(), contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static String getBinary() {
        return (EncryptType.encryptType == EncryptType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<TransactionReceipt> bid(String _nft, BigInteger _nftAssetId, BigInteger _amount) {
        final Function function = new Function(
                FUNC_BID, 
                Arrays.<Type>asList(new Address(_nft),
                new Uint256(_nftAssetId),
                new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void bid(String _nft, BigInteger _nftAssetId, BigInteger _amount, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_BID, 
                Arrays.<Type>asList(new Address(_nft),
                new Uint256(_nftAssetId),
                new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String bidSeq(String _nft, BigInteger _nftAssetId, BigInteger _amount) {
        final Function function = new Function(
                FUNC_BID, 
                Arrays.<Type>asList(new Address(_nft),
                new Uint256(_nftAssetId),
                new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<String, BigInteger, BigInteger> getBidInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> onBAC002Received(String param0, String param1, BigInteger param2, byte[] param3) {
        final Function function = new Function(
                FUNC_ONBAC002RECEIVED, 
                Arrays.<Type>asList(new Address(param0),
                new Address(param1),
                new Uint256(param2),
                new DynamicBytes(param3)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void onBAC002Received(String param0, String param1, BigInteger param2, byte[] param3, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ONBAC002RECEIVED, 
                Arrays.<Type>asList(new Address(param0),
                new Address(param1),
                new Uint256(param2),
                new DynamicBytes(param3)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String onBAC002ReceivedSeq(String param0, String param1, BigInteger param2, byte[] param3) {
        final Function function = new Function(
                FUNC_ONBAC002RECEIVED, 
                Arrays.<Type>asList(new Address(param0),
                new Address(param1),
                new Uint256(param2),
                new DynamicBytes(param3)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<String, String, BigInteger, byte[]> getOnBAC002ReceivedInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ONBAC002RECEIVED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple4<String, String, BigInteger, byte[]>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (byte[]) results.get(3).getValue()
                );
    }

    public Tuple1<byte[]> getOnBAC002ReceivedOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ONBAC002RECEIVED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes4>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> executeSale(String _nft, BigInteger _nftAssetId) {
        final Function function = new Function(
                FUNC_EXECUTESALE, 
                Arrays.<Type>asList(new Address(_nft),
                new Uint256(_nftAssetId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void executeSale(String _nft, BigInteger _nftAssetId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_EXECUTESALE, 
                Arrays.<Type>asList(new Address(_nft),
                new Uint256(_nftAssetId)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String executeSaleSeq(String _nft, BigInteger _nftAssetId) {
        final Function function = new Function(
                FUNC_EXECUTESALE, 
                Arrays.<Type>asList(new Address(_nft),
                new Uint256(_nftAssetId)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, BigInteger> getExecuteSaleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_EXECUTESALE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> createNFTAssetAuction(String _nft, BigInteger _nftAssetId, String _ftAssetAddress, BigInteger _price, BigInteger _duration) {
        final Function function = new Function(
                FUNC_CREATENFTASSETAUCTION, 
                Arrays.<Type>asList(new Address(_nft),
                new Uint256(_nftAssetId),
                new Address(_ftAssetAddress),
                new Uint128(_price),
                new Uint256(_duration)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void createNFTAssetAuction(String _nft, BigInteger _nftAssetId, String _ftAssetAddress, BigInteger _price, BigInteger _duration, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATENFTASSETAUCTION, 
                Arrays.<Type>asList(new Address(_nft),
                new Uint256(_nftAssetId),
                new Address(_ftAssetAddress),
                new Uint128(_price),
                new Uint256(_duration)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createNFTAssetAuctionSeq(String _nft, BigInteger _nftAssetId, String _ftAssetAddress, BigInteger _price, BigInteger _duration) {
        final Function function = new Function(
                FUNC_CREATENFTASSETAUCTION, 
                Arrays.<Type>asList(new Address(_nft),
                new Uint256(_nftAssetId),
                new Address(_ftAssetAddress),
                new Uint128(_price),
                new Uint256(_duration)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple5<String, BigInteger, String, BigInteger, BigInteger> getCreateNFTAssetAuctionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATENFTASSETAUCTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint128>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple5<String, BigInteger, String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue()
                );
    }

    public RemoteCall<Tuple2<BigInteger, String>> getNFTAssetAuctionDetails(String _nft, BigInteger _nftAssetId) {
        final Function function = new Function(FUNC_GETNFTASSETAUCTIONDETAILS, 
                Arrays.<Type>asList(new Address(_nft),
                new Uint256(_nftAssetId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple2<BigInteger, String>>(
                new Callable<Tuple2<BigInteger, String>>() {
                    @Override
                    public Tuple2<BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> onBAC001Received(String param0, String param1, BigInteger param2, byte[] param3) {
        final Function function = new Function(
                FUNC_ONBAC001RECEIVED, 
                Arrays.<Type>asList(new Address(param0),
                new Address(param1),
                new Uint256(param2),
                new DynamicBytes(param3)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void onBAC001Received(String param0, String param1, BigInteger param2, byte[] param3, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ONBAC001RECEIVED, 
                Arrays.<Type>asList(new Address(param0),
                new Address(param1),
                new Uint256(param2),
                new DynamicBytes(param3)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String onBAC001ReceivedSeq(String param0, String param1, BigInteger param2, byte[] param3) {
        final Function function = new Function(
                FUNC_ONBAC001RECEIVED, 
                Arrays.<Type>asList(new Address(param0),
                new Address(param1),
                new Uint256(param2),
                new DynamicBytes(param3)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<String, String, BigInteger, byte[]> getOnBAC001ReceivedInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ONBAC001RECEIVED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple4<String, String, BigInteger, byte[]>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (byte[]) results.get(3).getValue()
                );
    }

    public Tuple1<byte[]> getOnBAC001ReceivedOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ONBAC001RECEIVED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes4>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> cancelAution(String _nft, BigInteger _nftAssetId) {
        final Function function = new Function(
                FUNC_CANCELAUTION, 
                Arrays.<Type>asList(new Address(_nft),
                new Uint256(_nftAssetId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void cancelAution(String _nft, BigInteger _nftAssetId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CANCELAUTION, 
                Arrays.<Type>asList(new Address(_nft),
                new Uint256(_nftAssetId)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String cancelAutionSeq(String _nft, BigInteger _nftAssetId) {
        final Function function = new Function(
                FUNC_CANCELAUTION, 
                Arrays.<Type>asList(new Address(_nft),
                new Uint256(_nftAssetId)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, BigInteger> getCancelAutionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CANCELAUTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public RemoteCall<BigInteger> bids(String param0, BigInteger param1, String param2) {
        final Function function = new Function(FUNC_BIDS, 
                Arrays.<Type>asList(new Address(param0),
                new Uint256(param1),
                new Address(param2)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple7<String, BigInteger, BigInteger, String, BigInteger, String, Boolean>> nftAssetToAuction(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_NFTASSETTOAUCTION, 
                Arrays.<Type>asList(new Address(param0),
                new Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint128>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple7<String, BigInteger, BigInteger, String, BigInteger, String, Boolean>>(
                new Callable<Tuple7<String, BigInteger, BigInteger, String, BigInteger, String, Boolean>>() {
                    @Override
                    public Tuple7<String, BigInteger, BigInteger, String, BigInteger, String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, BigInteger, BigInteger, String, BigInteger, String, Boolean>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue());
                    }
                });
    }

    @Deprecated
    public static AuctionUnfixedPrice load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new AuctionUnfixedPrice(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AuctionUnfixedPrice load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new AuctionUnfixedPrice(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AuctionUnfixedPrice load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new AuctionUnfixedPrice(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AuctionUnfixedPrice load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new AuctionUnfixedPrice(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<AuctionUnfixedPrice> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AuctionUnfixedPrice.class, web3j, credentials, contractGasProvider, getBinary(), "");
    }

    @Deprecated
    public static RemoteCall<AuctionUnfixedPrice> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AuctionUnfixedPrice.class, web3j, credentials, gasPrice, gasLimit, getBinary(), "");
    }

    public static RemoteCall<AuctionUnfixedPrice> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AuctionUnfixedPrice.class, web3j, transactionManager, contractGasProvider, getBinary(), "");
    }

    @Deprecated
    public static RemoteCall<AuctionUnfixedPrice> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AuctionUnfixedPrice.class, web3j, transactionManager, gasPrice, gasLimit, getBinary(), "");
    }
}
