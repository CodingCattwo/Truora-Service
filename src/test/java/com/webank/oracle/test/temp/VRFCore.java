package com.webank.oracle.test.temp;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray2;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.crypto.EncryptType;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tuples.generated.Tuple4;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class VRFCore extends Contract {
    public static final String[] BINARY_ARRAY = {"","","81600060048110611fec57fe5b60200201518a098160016004811061200057fe5b602002018181525050848061201157fe5b8687098160026004811061202157fe5b602002018181525050848061203257fe5b8160026004811061203f57fe5b602002015187098160036004811061205357fe5b6020020181815250506040518060800160405280868061206f57fe5b8360026004811061207c57fe5b60200201518e098152602001868061209057fe5b8360036004811061209d57fe5b60200201518d09815260200186806120b157fe5b836000600481106120be57fe5b60200201518b09815260200186806120d257fe5b836001600481106120df57fe5b60200201518a098152509050806002600481106120f857fe5b60200201518160006004811061210a57fe5b602002015114158061213e57508060036004811061212457fe5b60200201518160016004811061213657fe5b602002015114155b6121b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f557365206a6163446f75626c652066756e6374696f6e20696e7374656164000081525060200191505060405180910390fd5b6121b8612560565b85806121c057fe5b826000600481106121cd57fe5b60200201518703836002600481106121e157fe5b602002015108816000600481106121f457fe5b602002018181525050858061220557fe5b8260016004811061221257fe5b602002015187038360036004811061222657fe5b6020020151088160016004811061223957fe5b602002018181525050858061224a57fe5b8160006004811061225757fe5b60200201518260006004811061226957fe5b6020020151098160026004811061227c57fe5b602002018181525050858061228d57fe5b8160006004811061229a57fe5b6020020151826002600481106122ac57fe5b602002015109816003600481106122bf57fe5b602002018181525050600086806122d257fe5b826003600481106122df57fe5b6020020151880388806122ee57fe5b846001600481106122fb57fe5b60200201518560016004811061230d57fe5b602002015109089050868061231e57fe5b878061232657fe5b888061232e57fe5b8460026004811061233b57fe5b60200201518660006004811061234d57fe5b6020020151096002098803820890506000878061236657fe5b888061236e57fe5b838a038a8061237957fe5b8660026004811061238657fe5b60200201518860006004811061239857fe5b60200201510908846001600481106123ac57fe5b602002015109905087806123bc57fe5b88806123c457fe5b846003600481106123d157fe5b6020020151866001600481106123e357fe5b602002015109890382089050600088806123f957fe5b898061240157fe5b8b8f098560006004811061241157fe5b602002015109905082828297509750975050505050505b9750975097945050505050565b60008083141580156124475750818314155b8015612454575060008214155b6124c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f496e76616c6964206e756d62657200000000000000000000000000000000000081525060200191505060405180910390fd5b6000809050600060019050600084905060005b60008714612520578682816124ea57fe5b0490508286806124f657fe5b87806124fe57fe5b85840988038608809450819550505086878202830380985081935050506124d9565b8394505050505092915050565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600080191681525090565b604051806080016040528060049060208202803683378082019150509050509056fe496e76616c696420636f6d7072657373656420454320706f696e74207072656669785f5f63616c6c6261636b52616e646f6d6e65737328627974657333322c75696e7432353629a26469706673582212208ea7165b8d288a87c754254af624d39e7e4f6c170a66ad32d38d0ba72cc068b964736f6c634300060a0033"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"seedAndBlockNum\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"seedAndBlockNum1\",\"type\":\"bytes\"}],\"name\":\"RandomnessRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"name\":\"RandomnessRequestFulfilled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bytes32\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"callbacks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"seedAndBlockNum\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_publicKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"preSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"fulfillRandomnessRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"hashOfKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_consumerSeed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"randomnessRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String[] SM_BINARY_ARRAY = {"","5060008061107587600360048110610ff357fe5b60200201517f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f817987f483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b88a60026004811061104757fe5b60200201518c60006002811061105957fe5b60200201518d60016002811061106b57fe5b60200201516115e4565b915091506000806110ce8960036004811061108c57fe5b602002015187878c6002600481106110a057fe5b60200201518d6000600481106110b257fe5b60200201518e6001600481106110c457fe5b60200201516115e4565b91509150600061110687878c6000600481106110e657fe5b60200201518d6001600481106110f857fe5b602002015189898989611658565b90508960026004811061111557fe5b60200201518160801c6fffffffffffffffffffffffffffffffff16149750505050505050509392505050565b6000606060fe600361115386866118d1565b604051602001808460ff1660ff1660f81b81526001018360ff1660ff1660f81b815260010182805190602001908083835b602083106111a75780518252602082019150602081019050602083039250611184565b6001836020036101000a038019825116818451168082178552505050505050905001935050505060405160208183030381529060405290506002816040518082805190602001908083835b6020831061121557805182526020820191506020810190506020830392506111f2565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa158015611257573d6000803e3d6000fd5b5050506040513d602081101561126c57600080fd5b810190808051906020019092919050505091505092915050565b60006112b78383600060077ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f61191f565b905092915050565b600080606060fe60016112f4876000600281106112d857fe5b6020020151886001600281106112ea57fe5b60200201516118d1565b86604051602001808560ff1660ff1660f81b81526001018460ff1660ff1660f81b815260010183805190602001908083835b602083106113495780518252602082019150602081019050602083039250611326565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831061139a5780518252602082019150602081019050602083039250611377565b6001836020036101000a038019825116818451168082178552505050505050905001945050505050604051602081830303815290604052905060008090505b6101008160ff16101561156e576000600283836040516020018083805190602001908083835b6020831061142257805182526020820191506020810190506020830392506113ff565b6001836020036101000a0380198251168184511680821785525050505050509050018260ff1660ff1660f81b8152600101925050506040516020818303038152906040526040518082805190602001908083835b602083106114995780518252602082019150602081019050602083039250611476565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa1580156114db573d6000803e3d6000fd5b5050506040513d60208110156114f057600080fd5b8101908080519060200190929190505050905060008160001c90506000611518600283611286565b90506115498282600060077ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f611a0e565b1561155e5781819650965050505050506115dd565b50505080806001019150506113d9565b506040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4e6f2076616c696420706f696e742077617320666f756e64000000000000000081525060200191505060405180910390fd5b9250929050565b6000806000806115f58a8a8a611ab2565b91509150600080611607898989611ab2565b9150915060008061163d8686868660007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f611aef565b91509150818197509750505050505050965096945050505050565b6000606060fe600261166a8c8c6118d1565b6116748b8b6118d1565b61167e8a8a6118d1565b61168889896118d1565b604051602001808760ff1660ff1660f81b81526001018660ff1660ff1660f81b815260010185805190602001908083835b602083106116dc57805182526020820191506020810190506020830392506116b9565b6001836020036101000a03801982511681845116808217855250505050505090500184805190602001908083835b6020831061172d578051825260208201915060208101905060208303925061170a565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b6020831061177e578051825260208201915060208101905060208303925061175b565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083106117cf57805182526020820191506020810190506020830392506117ac565b6001836020036101000a0380198251168184511680821785525050505050509050019650505050505050604051602081830303815290604052905060006002826040518082805190602001908083835b60208310611842578051825260208201915060208101905060208303925061181f565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa158015611884573d6000803e3d6000fd5b5050506040513d602081101561189957600080fd5b810190808051906020019092919050505090506000604051826000820152600081015191505080935050505098975050505050505050565b60606000600283816118df57fe5b0660020190508084604051602001808360ff1660ff1660f81b81526001018281526020019250505060405160208183030381529060405291505092915050565b600060028660ff161480611936575060038660ff16145b61198b576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806125836022913960400191505060405180910390fd5b6000828061199557fe5b838061199d57fe5b8585806119a657fe5b888a090884806119b257fe5b85806119ba57fe5b898a0989090890506119da81600460018601816119d357fe5b0485611b23565b905060008060028960ff168401816119ee57fe5b06146119fc578184036119fe565b815b9050809250505095945050505050565b60008560001480611a1f5750818610155b80611a2a5750846000145b80611a355750818510155b15611a435760009050611aa9565b60008280611a4d57fe5b868709905060008380611a5c57fe5b888580611a6557fe5b8a8b0909905060008614611a8b578380611a7b57fe5b8480611a8357fe5b878a09820890505b60008514611aa1578380611a9b57fe5b85820890505b808214925050505b95945050505050565b600080611ae385858560007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f611c51565b91509150935093915050565b600080600080611b00888887611c8b565b91509150611b128a8a84848a8a611ca7565b935093505050965096945050505050565b600080821415611b9b576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f4d6f64756c7573206973207a65726f000000000000000000000000000000000081525060200191505060405180910390fd5b6000841415611bad5760009050611c4a565b6000831415611bbf5760019050611c4a565b60006001905060007f800000000000000000000000000000000000000000000000000000000000000090505b6000811115611c4457838186161515870a85848509099150836002820486161515870a85848509099150836004820486161515870a85848509099150836008820486161515870a85848509099150601081049050611beb565b81925050505b9392505050565b6000806000806000611c688a8a8a60018b8b611d45565b925092509250611c7a83838389611dea565b945094505050509550959350505050565b600080848385850381611c9a57fe5b0691509150935093915050565b600080600080905060008090506000809050888b1415611d085760008680611ccb57fe5b898c081415611ce95760008081915080905094509450505050611d3a565b611cf78b8b60018a8a611e45565b809350819450829550505050611d26565b611d198b8b60018c8c60018c611f64565b8093508194508295505050505b611d3283838389611dea565b945094505050505b965096945050505050565b600080600080891415611d6057878787925092509250611dde565b6000899050600080905060008090506000600190505b60008414611dd05760006001851614611da557611d988383838f8f8f8e611f64565b8093508194508295505050505b60028481611daf57fe5b049350611dbf8c8c8c8c8c611e45565b809c50819d50829e50505050611d76565b828282965096509650505050505b96509650969350505050565b6000806000611df98585612435565b905060008480611e0557fe5b828309905060008580611e1457fe5b828a09905060008680611e2357fe5b8780611e2b57fe5b8486098a0990508181955095505050505094509492505050565b600080600080861415611e6057878787925092509250611f59565b60008480611e6a57fe5b898a09905060008580611e7957fe5b898a09905060008680611e8857fe5b898a09905060008780611e9757fe5b8880611e9f57fe5b848e09600409905060008880611eb157fe5b8980611eb957fe5b8a80611ec157fe5b8586098c098a80611ece57fe5b876003090890508880611edd57fe5b8980611ee557fe5b8384088a038a80611ef257fe5b8384090894508880611f0057fe5b8980611f0857fe5b8a80611f1057fe5b8687096008098a038a80611f2057fe5b8b80611f2857fe5b888d03860884090893508880611f3a57fe5b8980611f4257fe5b8c8e09600209925084848497509750975050505050505b955095509592505050565b6000806000808a148015611f785750600089145b15611f8b57868686925092509250612428565b600087148015611f9b5750600086145b15611fae57898989925092509250612428565b611fb6612560565b8480611fbe57fe5b898a0981600060048110611fce57fe5b6020020181815250508480611fdf57fe5b","81600060048110611fec57fe5b60200201518a098160016004811061200057fe5b602002018181525050848061201157fe5b8687098160026004811061202157fe5b602002018181525050848061203257fe5b8160026004811061203f57fe5b602002015187098160036004811061205357fe5b6020020181815250506040518060800160405280868061206f57fe5b8360026004811061207c57fe5b60200201518e098152602001868061209057fe5b8360036004811061209d57fe5b60200201518d09815260200186806120b157fe5b836000600481106120be57fe5b60200201518b09815260200186806120d257fe5b836001600481106120df57fe5b60200201518a098152509050806002600481106120f857fe5b60200201518160006004811061210a57fe5b602002015114158061213e57508060036004811061212457fe5b60200201518160016004811061213657fe5b602002015114155b6121b0576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f557365206a6163446f75626c652066756e6374696f6e20696e7374656164000081525060200191505060405180910390fd5b6121b8612560565b85806121c057fe5b826000600481106121cd57fe5b60200201518703836002600481106121e157fe5b602002015108816000600481106121f457fe5b602002018181525050858061220557fe5b8260016004811061221257fe5b602002015187038360036004811061222657fe5b6020020151088160016004811061223957fe5b602002018181525050858061224a57fe5b8160006004811061225757fe5b60200201518260006004811061226957fe5b6020020151098160026004811061227c57fe5b602002018181525050858061228d57fe5b8160006004811061229a57fe5b6020020151826002600481106122ac57fe5b602002015109816003600481106122bf57fe5b602002018181525050600086806122d257fe5b826003600481106122df57fe5b6020020151880388806122ee57fe5b846001600481106122fb57fe5b60200201518560016004811061230d57fe5b602002015109089050868061231e57fe5b878061232657fe5b888061232e57fe5b8460026004811061233b57fe5b60200201518660006004811061234d57fe5b6020020151096002098803820890506000878061236657fe5b888061236e57fe5b838a038a8061237957fe5b8660026004811061238657fe5b60200201518860006004811061239857fe5b60200201510908846001600481106123ac57fe5b602002015109905087806123bc57fe5b88806123c457fe5b846003600481106123d157fe5b6020020151866001600481106123e357fe5b602002015109890382089050600088806123f957fe5b898061240157fe5b8b8f098560006004811061241157fe5b602002015109905082828297509750975050505050505b9750975097945050505050565b60008083141580156124475750818314155b8015612454575060008214155b6124c6576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f496e76616c6964206e756d62657200000000000000000000000000000000000081525060200191505060405180910390fd5b6000809050600060019050600084905060005b60008714612520578682816124ea57fe5b0490508286806124f657fe5b87806124fe57fe5b85840988038608809450819550505086878202830380985081935050506124d9565b8394505050505092915050565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600080191681525090565b604051806080016040528060049060208202803683378082019150509050509056fe496e76616c696420636f6d7072657373656420454320706f696e74207072656669785f5f63616c6c6261636b52616e646f6d6e65737328627974657333322c75696e7432353629a26469706673582212202ece03498fd8675f162b3598bc80767497d011ff03e84de2408de146ca52b23864736f6c634300060a0033"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String FUNC_BYTES32TOBYTES = "bytes32ToBytes";

    public static final String FUNC_CALLBACKS = "callbacks";

    public static final String FUNC_FULFILLRANDOMNESSREQUEST = "fulfillRandomnessRequest";

    public static final String FUNC_HASHOFKEY = "hashOfKey";

    public static final String FUNC_RANDOMNESSREQUEST = "randomnessRequest";

    public static final Event RANDOMNESSREQUEST_EVENT = new Event("RandomnessRequest", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event RANDOMNESSREQUESTFULFILLED_EVENT = new Event("RandomnessRequestFulfilled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected VRFCore(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(getBinary(), contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected VRFCore(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(getBinary(), contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected VRFCore(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(getBinary(), contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected VRFCore(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(getBinary(), contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static String getBinary() {
        return (EncryptType.encryptType == EncryptType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public List<RandomnessRequestEventResponse> getRandomnessRequestEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RANDOMNESSREQUEST_EVENT, transactionReceipt);
        ArrayList<RandomnessRequestEventResponse> responses = new ArrayList<RandomnessRequestEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RandomnessRequestEventResponse typedResponse = new RandomnessRequestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.keyHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.seed = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.blockNumber = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.requestId = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.seedAndBlockNum = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.seedAndBlockNum1 = (byte[]) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerRandomnessRequestEventLogFilter(String fromBlock, String toBlock, List<String> otherTopics, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(RANDOMNESSREQUEST_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void registerRandomnessRequestEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(RANDOMNESSREQUEST_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<RandomnessRequestFulfilledEventResponse> getRandomnessRequestFulfilledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RANDOMNESSREQUESTFULFILLED_EVENT, transactionReceipt);
        ArrayList<RandomnessRequestFulfilledEventResponse> responses = new ArrayList<RandomnessRequestFulfilledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RandomnessRequestFulfilledEventResponse typedResponse = new RandomnessRequestFulfilledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requestId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.output = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerRandomnessRequestFulfilledEventLogFilter(String fromBlock, String toBlock, List<String> otherTopics, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(RANDOMNESSREQUESTFULFILLED_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void registerRandomnessRequestFulfilledEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(RANDOMNESSREQUESTFULFILLED_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public RemoteCall<byte[]> bytes32ToBytes(byte[] _bytes32) {
        final Function function = new Function(FUNC_BYTES32TOBYTES, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(_bytes32)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<Tuple2<String, byte[]>> callbacks(byte[] param0) {
        final Function function = new Function(FUNC_CALLBACKS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteCall<Tuple2<String, byte[]>>(
                new Callable<Tuple2<String, byte[]>>() {
                    @Override
                    public Tuple2<String, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, byte[]>(
                                (String) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> fulfillRandomnessRequest(List<BigInteger> _publicKey, byte[] _proof, BigInteger preSeed, BigInteger blockNumber) {
        final Function function = new Function(
                FUNC_FULFILLRANDOMNESSREQUEST, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray2<org.fisco.bcos.web3j.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_publicKey, org.fisco.bcos.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_proof), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(preSeed), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(blockNumber)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void fulfillRandomnessRequest(List<BigInteger> _publicKey, byte[] _proof, BigInteger preSeed, BigInteger blockNumber, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_FULFILLRANDOMNESSREQUEST, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray2<org.fisco.bcos.web3j.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_publicKey, org.fisco.bcos.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_proof), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(preSeed), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(blockNumber)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String fulfillRandomnessRequestSeq(List<BigInteger> _publicKey, byte[] _proof, BigInteger preSeed, BigInteger blockNumber) {
        final Function function = new Function(
                FUNC_FULFILLRANDOMNESSREQUEST, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray2<org.fisco.bcos.web3j.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_publicKey, org.fisco.bcos.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(_proof), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(preSeed), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(blockNumber)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<List<BigInteger>, byte[], BigInteger, BigInteger> getFulfillRandomnessRequestInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FULFILLRANDOMNESSREQUEST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray2<Uint256>>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple4<List<BigInteger>, byte[], BigInteger, BigInteger>(

                convertToNative((List<Uint256>) results.get(0).getValue()), 
                (byte[]) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> hashOfKey(List<BigInteger> _publicKey) {
        final Function function = new Function(
                FUNC_HASHOFKEY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray2<org.fisco.bcos.web3j.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_publicKey, org.fisco.bcos.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void hashOfKey(List<BigInteger> _publicKey, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_HASHOFKEY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray2<org.fisco.bcos.web3j.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_publicKey, org.fisco.bcos.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String hashOfKeySeq(List<BigInteger> _publicKey) {
        final Function function = new Function(
                FUNC_HASHOFKEY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray2<org.fisco.bcos.web3j.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_publicKey, org.fisco.bcos.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<List<BigInteger>> getHashOfKeyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_HASHOFKEY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray2<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<List<BigInteger>>(

                convertToNative((List<Uint256>) results.get(0).getValue())
                );
    }

    public Tuple1<byte[]> getHashOfKeyOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_HASHOFKEY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> randomnessRequest(byte[] _keyHash, BigInteger _consumerSeed, String _sender) {
        final Function function = new Function(
                FUNC_RANDOMNESSREQUEST, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(_keyHash), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_consumerSeed), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_sender)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void randomnessRequest(byte[] _keyHash, BigInteger _consumerSeed, String _sender, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_RANDOMNESSREQUEST, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(_keyHash), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_consumerSeed), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_sender)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String randomnessRequestSeq(byte[] _keyHash, BigInteger _consumerSeed, String _sender) {
        final Function function = new Function(
                FUNC_RANDOMNESSREQUEST, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(_keyHash), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_consumerSeed), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_sender)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<byte[], BigInteger, String> getRandomnessRequestInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_RANDOMNESSREQUEST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<byte[], BigInteger, String>(

                (byte[]) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    @Deprecated
    public static VRFCore load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new VRFCore(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static VRFCore load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new VRFCore(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static VRFCore load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new VRFCore(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static VRFCore load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new VRFCore(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<VRFCore> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(VRFCore.class, web3j, credentials, contractGasProvider, getBinary(), "");
    }

    @Deprecated
    public static RemoteCall<VRFCore> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(VRFCore.class, web3j, credentials, gasPrice, gasLimit, getBinary(), "");
    }

    public static RemoteCall<VRFCore> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(VRFCore.class, web3j, transactionManager, contractGasProvider, getBinary(), "");
    }

    @Deprecated
    public static RemoteCall<VRFCore> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(VRFCore.class, web3j, transactionManager, gasPrice, gasLimit, getBinary(), "");
    }

    public static class RandomnessRequestEventResponse {
        public Log log;

        public byte[] keyHash;

        public BigInteger seed;

        public BigInteger blockNumber;

        public String sender;

        public byte[] requestId;

        public byte[] seedAndBlockNum;

        public byte[] seedAndBlockNum1;
    }

    public static class RandomnessRequestFulfilledEventResponse {
        public Log log;

        public byte[] requestId;

        public BigInteger output;
    }
}
