package com.webank.oracle.test.temp;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Bool;
import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.generated.Bytes4;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint128;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.crypto.EncryptType;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tuples.generated.Tuple4;
import org.fisco.bcos.web3j.tuples.generated.Tuple5;
import org.fisco.bcos.web3j.tuples.generated.Tuple7;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class AuctionUnfixedPrice extends Contract {
    public static final String[] BINARY_ARRAY = {"608060405234801561001057600080fd5b506122de806100206000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630f41ba4b1461009e57806331f6f50e146100ba5780637bed7232146100f75780639167657614610120578063b4598d8214610149578063c73d16ae14610187578063cdbd4d01146101c4578063dd768922146101ed578063ea28a5ae1461022a575b600080fd5b6100b860048036036100b39190810190611de4565b61026d565b005b3480156100c657600080fd5b506100e160048036036100dc9190810190611c67565b610830565b6040516100ee91906120a7565b60405180910390f35b34801561010357600080fd5b5061011e60048036036101199190810190611ce2565b610860565b005b34801561012c57600080fd5b5061014760048036036101429190810190611d6d565b610e4a565b005b34801561015557600080fd5b50610170600480360361016b9190810190611ce2565b611264565b60405161017e92919061213d565b60405180910390f35b34801561019357600080fd5b506101ae60048036036101a99190810190611c67565b611544565b6040516101bb91906120a7565b60405180910390f35b3480156101d057600080fd5b506101eb60048036036101e69190810190611ce2565b611574565b005b3480156101f957600080fd5b50610214600480360361020f9190810190611d1e565b6118e9565b6040516102219190612122565b60405180910390f35b34801561023657600080fd5b50610251600480360361024c9190810190611ce2565b61191b565b6040516102649796959493929190611ffc565b60405180910390f35b6000806000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002091508160010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16831015151561030257600080fd5b8160050160149054906101000a900460ff16151561031f57600080fd5b428260020154111515610367576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035e90612102565b60405180910390fd5b6000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115610538578160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639bd9bbc633600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161050592919061206b565b600060405180830381600087803b15801561051f57600080fd5b505af1158015610533573d6000803e3d6000fd5b505050505b82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e7d6113330866040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161064793929190611fb2565b600060405180830381600087803b15801561066157600080fd5b505af1158015610675573d6000803e3d6000fd5b505050506000826006018054905014156106da57828260040181905550338260050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610793565b600182600601805490500390508282600601828154811015156106f957fe5b9060005260206000200154101515610746576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073d906120c2565b60405180910390fd5b828260040181905550338260050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b816007013390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050816006018390806001815401808255809150509060018203906000526020600020016000909192909190915055505050505050565b60006331f6f50e7c0100000000000000000000000000000000000000000000000000000000029050949350505050565b6000806000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000209150428260020154111515156108fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f4906120e2565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561095b57600080fd5b8160050160149054906101000a900460ff16151561097857600080fd5b60008260050160146101000a81548160ff021916908315150217905550600082600601805490501415610a59578373ffffffffffffffffffffffffffffffffffffffff1663d0e7d611308460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a2293929190611f68565b600060405180830381600087803b158015610a3c57600080fd5b505af1158015610a50573d6000803e3d6000fd5b50505050610e44565b8160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639bd9bbc68360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600401546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610afc92919061206b565b600060405180830381600087803b158015610b1657600080fd5b505af1158015610b2a573d6000803e3d6000fd5b50505050600090505b8160070180549050811015610d94578160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260070182815481101515610b8e57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610d87578160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639bd9bbc68360070183815481101515610c2757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060008660070186815481101515610cb557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d5492919061206b565b600060405180830381600087803b158015610d6e57600080fd5b505af1158015610d82573d6000803e3d6000fd5b505050505b8080600101915050610b33565b8373ffffffffffffffffffffffffffffffffffffffff1663d0e7d611308460050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e1193929190611f68565b600060405180830381600087803b158015610e2b57600080fd5b505af1158015610e3f573d6000803e3d6000fd5b505050505b50505050565b610e526119f3565b60008073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515610e8f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614151515610ecb57600080fd5b6000846fffffffffffffffffffffffffffffffff16111515610eec57600080fd5b600083111515610efb57600080fd5b610120604051908101604052803373ffffffffffffffffffffffffffffffffffffffff168152602001856fffffffffffffffffffffffffffffffff1681526020018481526020018673ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016001151581526020016000604051908082528060200260200182016040528015610fbb5781602001602082028038833980820191505090505b5081526020016000604051908082528060200260200182016040528015610ff157816020","","565b8181036060830152611ff281611f03565b9050949350505050565b600060e082019050612011600083018a611e33565b61201e6020830189611f4a565b61202b6040830188611f59565b6120386060830187611e33565b6120456080830186611f59565b61205260a0830185611e33565b61205f60c0830184611e42565b98975050505050505050565b60006060820190506120806000830185611e33565b61208d6020830184611f59565b818103604083015261209e81611f03565b90509392505050565b60006020820190506120bc6000830184611e51565b92915050565b600060208201905081810360008301526120db81611e6f565b9050919050565b600060208201905081810360008301526120fb81611ecc565b9050919050565b6000602082019050818103600083015261211b81611f13565b9050919050565b60006020820190506121376000830184611f59565b92915050565b60006040820190506121526000830185611f59565b61215f6020830184611e33565b9392505050565b6000604051905081810181811067ffffffffffffffff8211171561218957600080fd5b8060405250919050565b600067ffffffffffffffff8211156121aa57600080fd5b601f19601f8301169050602081019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061228e826121bf565b9050919050565b828183376000838301525050505600a265627a7a723058200c8c84b6411c73a966f6ac894b148eaf5521c2ecf1f09abb549e27bf82fb53346c6578706572696d656e74616cf50037"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"_nft\",\"type\":\"address\"},{\"name\":\"_nftAssetId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onBAC002Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nft\",\"type\":\"address\"},{\"name\":\"_nftAssetId\",\"type\":\"uint256\"}],\"name\":\"executeSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nft\",\"type\":\"address\"},{\"name\":\"_nftAssetId\",\"type\":\"uint256\"},{\"name\":\"_ftAssetAddress\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint128\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createNFTAssetAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nft\",\"type\":\"address\"},{\"name\":\"_nftAssetId\",\"type\":\"uint256\"}],\"name\":\"getNFTAssetAuctionDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onBAC001Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nft\",\"type\":\"address\"},{\"name\":\"_nftAssetId\",\"type\":\"uint256\"}],\"name\":\"cancelAution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bids\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftAssetToAuction\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint128\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"ftAssetAddress\",\"type\":\"address\"},{\"name\":\"maxBid\",\"type\":\"uint256\"},{\"name\":\"maxBidUser\",\"type\":\"address\"},{\"name\":\"isActive\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String[] SM_BINARY_ARRAY = {"","ffffff1681526020019060010190808311610fab575b505050505081525050905080608001518160a0015192509250509250929050565b6000806000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002091508160010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1683101515156110ab57600080fd5b8160050160149054906101000a900460ff1615156110c857600080fd5b428260020154111515611110576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161110790612102565b60405180910390fd5b6000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411156112e1578160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166393fa8f3e33600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112ae92919061206b565b600060405180830381600087803b1580156112c857600080fd5b505af11580156112dc573d6000803e3d6000fd5b505050505b82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166380b30b3f3330866040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113f093929190611fb2565b600060405180830381600087803b15801561140a57600080fd5b505af115801561141e573d6000803e3d6000fd5b5050505060008260060180549050141561148357828260040181905550338260050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061153c565b600182600601805490500390508282600601828154811015156114a257fe5b90600052602060002001541015156114ef576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016114e6906120c2565b60405180910390fd5b828260040181905550338260050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b816007013390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050816006018390806001815401808255809150509060018203906000526020600020016000909192909190915055505050505050565b6115e16119f3565b60008073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415151561161e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415151561165a57600080fd5b6000846fffffffffffffffffffffffffffffffff1611151561167b57600080fd5b60008311151561168a57600080fd5b610120604051908101604052803373ffffffffffffffffffffffffffffffffffffffff168152602001856fffffffffffffffffffffffffffffffff1681526020018481526020018673ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600115158152602001600060405190808252806020026020018201604052801561174a5781602001602082028038833980820191505090505b50815260200160006040519080825280602002602001820160405280156117805781602001602082028038833980820191505090505b5081525091503390508673ffffffffffffffffffffffffffffffffffffffff166380b30b3f8230896040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016117e293929190611f68565b600060405180830381600087803b1580156117fc57600080fd5b505af1158015611810573d6000803e3d6000fd5b50505050816000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160050160146101000a81548160ff02191690831515021790555060e08201518160060190805190602001906119c8929190611a96565b506101008201518160070190805190602001906119e6929190611ae3565b5090505050505050505050565b61012060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160001515815260200160608152602001606081525090565b828054828255906000526020600020908101928215611ad2579160200282015b82811115611ad1578251825591602001919060010190611ab6565b5b509050611adf9190611b6d565b5090565b828054828255906000526020600020908101928215611b5c579160200282015b82811115611b5b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611b03565b5b509050611b699190611b92565b5090565b611b8f91905b80821115611b8b576000816000905550600101611b73565b5090565b90565b611bd291905b80821115611bce57600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101611b98565b5090565b90565b6000611be1823561223d565b905092915050565b600082601f8301121515611bfc57600080fd5b8135611c0f611c0a82612193565b612166565b91508082526020830160208301858383011115611c2b57600080fd5b611c36838284612295565b50505092915050565b6000611c4b823561225d565b905092915050565b6000611c5f8235612279565b905092915050565b60008060008060808587031215611c7d57600080fd5b6000611c8b87828801611bd5565b9450506020611c9c87828801611bd5565b9350506040611cad87828801611c53565b925050606085013567ffffffffffffffff811115611cca57600080fd5b611cd687828801611be9565b91505092959194509250565b60008060408385031215611cf557600080fd5b6000611d0385828601611bd5565b9250506020611d1485828601611c53565b9150509250929050565b600080600060608486031215611d3357600080fd5b6000611d4186828701611bd5565b9350506020611d5286828701611c53565b9250506040611d6386828701611bd5565b9150509250925092565b600080600080600060a08688031215611d8557600080fd5b6000611d9388828901611bd5565b9550506020611da488828901611c53565b9450506040611db588828901611bd5565b9350506060611dc688828901611c3f565b9250506080611dd788828901611c53565b9150509295509295909350565b600080600060608486031215611df957600080fd5b6000611e0786828701611bd5565b9350506020611e1886828701611c53565b9250506040611e2986828701611c53565b9150509250925092565b611e3c816121bf565b82525050565b611e4b816121df565b82525050565b611e5a816121eb565b82525050565b611e6981612283565b82525050565b6000808252602082019050919050565b6000602782527f43757272656e74206d61782062696420697320686967686572207468616e207960208301527f6f757220626964000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601982527f446561646c696e6520646964206e6f74207061737320796574000000000000006020830152604082019050919050565b6000601782527f446561646c696e6520616c7265616479207061737365640000000000000000006020830152604082019050919050565b611f5381612217565b82525050565b611f6281612233565b82525050565b6000608082019050611f7d6000830186611e33565b611f8a6020830185611e33565b611f976040830184611f59565b8181036060830152611fa881611e6f565b9050949350505050565b6000608082019050611fc76000830186611e33565b611fd46020830185611e60565b611fe16040830184611f59","565b8181036060830152611ff281611e6f565b9050949350505050565b600060e082019050612011600083018a611e33565b61201e6020830189611f4a565b61202b6040830188611f59565b6120386060830187611e33565b6120456080830186611f59565b61205260a0830185611e33565b61205f60c0830184611e42565b98975050505050505050565b60006060820190506120806000830185611e33565b61208d6020830184611f59565b818103604083015261209e81611e6f565b90509392505050565b60006020820190506120bc6000830184611e51565b92915050565b600060208201905081810360008301526120db81611e7f565b9050919050565b600060208201905081810360008301526120fb81611edc565b9050919050565b6000602082019050818103600083015261211b81611f13565b9050919050565b60006020820190506121376000830184611f59565b92915050565b60006040820190506121526000830185611f59565b61215f6020830184611e33565b9392505050565b6000604051905081810181811067ffffffffffffffff8211171561218957600080fd5b8060405250919050565b600067ffffffffffffffff8211156121aa57600080fd5b601f19601f8301169050602081019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061228e826121bf565b9050919050565b828183376000838301525050505600a265627a7a72305820ffdf4d3ef4e364a2c3c22227623fdcc91cd7d4230b7d1ea415be672bfd1db8686c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String FUNC_BID = "bid";

    public static final String FUNC_ONBAC002RECEIVED = "onBAC002Received";

    public static final String FUNC_EXECUTESALE = "executeSale";

    public static final String FUNC_CREATENFTASSETAUCTION = "createNFTAssetAuction";

    public static final String FUNC_GETNFTASSETAUCTIONDETAILS = "getNFTAssetAuctionDetails";

    public static final String FUNC_ONBAC001RECEIVED = "onBAC001Received";

    public static final String FUNC_CANCELAUTION = "cancelAution";

    public static final String FUNC_BIDS = "bids";

    public static final String FUNC_NFTASSETTOAUCTION = "nftAssetToAuction";

    @Deprecated
    protected AuctionUnfixedPrice(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(getBinary(), contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AuctionUnfixedPrice(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(getBinary(), contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AuctionUnfixedPrice(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(getBinary(), contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AuctionUnfixedPrice(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(getBinary(), contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static String getBinary() {
        return (EncryptType.encryptType == EncryptType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<TransactionReceipt> bid(String _nft, BigInteger _nftAssetId, BigInteger _amount) {
        final Function function = new Function(
                FUNC_BID, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_nft), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_nftAssetId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void bid(String _nft, BigInteger _nftAssetId, BigInteger _amount, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_BID, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_nft), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_nftAssetId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String bidSeq(String _nft, BigInteger _nftAssetId, BigInteger _amount) {
        final Function function = new Function(
                FUNC_BID, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_nft), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_nftAssetId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<String, BigInteger, BigInteger> getBidInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> onBAC002Received(String param0, String param1, BigInteger param2, byte[] param3) {
        final Function function = new Function(
                FUNC_ONBAC002RECEIVED, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(param0), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(param1), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(param2), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(param3)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void onBAC002Received(String param0, String param1, BigInteger param2, byte[] param3, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ONBAC002RECEIVED, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(param0), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(param1), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(param2), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(param3)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String onBAC002ReceivedSeq(String param0, String param1, BigInteger param2, byte[] param3) {
        final Function function = new Function(
                FUNC_ONBAC002RECEIVED, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(param0), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(param1), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(param2), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(param3)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<String, String, BigInteger, byte[]> getOnBAC002ReceivedInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ONBAC002RECEIVED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple4<String, String, BigInteger, byte[]>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (byte[]) results.get(3).getValue()
                );
    }

    public Tuple1<byte[]> getOnBAC002ReceivedOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ONBAC002RECEIVED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes4>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> executeSale(String _nft, BigInteger _nftAssetId) {
        final Function function = new Function(
                FUNC_EXECUTESALE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_nft), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_nftAssetId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void executeSale(String _nft, BigInteger _nftAssetId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_EXECUTESALE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_nft), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_nftAssetId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String executeSaleSeq(String _nft, BigInteger _nftAssetId) {
        final Function function = new Function(
                FUNC_EXECUTESALE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_nft), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_nftAssetId)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, BigInteger> getExecuteSaleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_EXECUTESALE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> createNFTAssetAuction(String _nft, BigInteger _nftAssetId, String _ftAssetAddress, BigInteger _price, BigInteger _duration) {
        final Function function = new Function(
                FUNC_CREATENFTASSETAUCTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_nft), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_nftAssetId), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_ftAssetAddress), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint128(_price), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_duration)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void createNFTAssetAuction(String _nft, BigInteger _nftAssetId, String _ftAssetAddress, BigInteger _price, BigInteger _duration, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATENFTASSETAUCTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_nft), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_nftAssetId), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_ftAssetAddress), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint128(_price), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_duration)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createNFTAssetAuctionSeq(String _nft, BigInteger _nftAssetId, String _ftAssetAddress, BigInteger _price, BigInteger _duration) {
        final Function function = new Function(
                FUNC_CREATENFTASSETAUCTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_nft), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_nftAssetId), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_ftAssetAddress), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint128(_price), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_duration)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple5<String, BigInteger, String, BigInteger, BigInteger> getCreateNFTAssetAuctionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATENFTASSETAUCTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint128>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple5<String, BigInteger, String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue()
                );
    }

    public RemoteCall<Tuple2<BigInteger, String>> getNFTAssetAuctionDetails(String _nft, BigInteger _nftAssetId) {
        final Function function = new Function(FUNC_GETNFTASSETAUCTIONDETAILS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_nft), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_nftAssetId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple2<BigInteger, String>>(
                new Callable<Tuple2<BigInteger, String>>() {
                    @Override
                    public Tuple2<BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> onBAC001Received(String param0, String param1, BigInteger param2, byte[] param3) {
        final Function function = new Function(
                FUNC_ONBAC001RECEIVED, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(param0), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(param1), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(param2), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(param3)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void onBAC001Received(String param0, String param1, BigInteger param2, byte[] param3, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ONBAC001RECEIVED, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(param0), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(param1), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(param2), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(param3)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String onBAC001ReceivedSeq(String param0, String param1, BigInteger param2, byte[] param3) {
        final Function function = new Function(
                FUNC_ONBAC001RECEIVED, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(param0), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(param1), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(param2), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicBytes(param3)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<String, String, BigInteger, byte[]> getOnBAC001ReceivedInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ONBAC001RECEIVED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple4<String, String, BigInteger, byte[]>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (byte[]) results.get(3).getValue()
                );
    }

    public Tuple1<byte[]> getOnBAC001ReceivedOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ONBAC001RECEIVED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes4>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> cancelAution(String _nft, BigInteger _nftAssetId) {
        final Function function = new Function(
                FUNC_CANCELAUTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_nft), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_nftAssetId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void cancelAution(String _nft, BigInteger _nftAssetId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CANCELAUTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_nft), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_nftAssetId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String cancelAutionSeq(String _nft, BigInteger _nftAssetId) {
        final Function function = new Function(
                FUNC_CANCELAUTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(_nft), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_nftAssetId)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, BigInteger> getCancelAutionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CANCELAUTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public RemoteCall<BigInteger> bids(String param0, BigInteger param1, String param2) {
        final Function function = new Function(FUNC_BIDS, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(param0), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(param1), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(param2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple7<String, BigInteger, BigInteger, String, BigInteger, String, Boolean>> nftAssetToAuction(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_NFTASSETTOAUCTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(param0), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint128>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple7<String, BigInteger, BigInteger, String, BigInteger, String, Boolean>>(
                new Callable<Tuple7<String, BigInteger, BigInteger, String, BigInteger, String, Boolean>>() {
                    @Override
                    public Tuple7<String, BigInteger, BigInteger, String, BigInteger, String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, BigInteger, BigInteger, String, BigInteger, String, Boolean>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue());
                    }
                });
    }

    @Deprecated
    public static AuctionUnfixedPrice load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new AuctionUnfixedPrice(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AuctionUnfixedPrice load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new AuctionUnfixedPrice(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AuctionUnfixedPrice load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new AuctionUnfixedPrice(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AuctionUnfixedPrice load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new AuctionUnfixedPrice(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<AuctionUnfixedPrice> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AuctionUnfixedPrice.class, web3j, credentials, contractGasProvider, getBinary(), "");
    }

    @Deprecated
    public static RemoteCall<AuctionUnfixedPrice> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AuctionUnfixedPrice.class, web3j, credentials, gasPrice, gasLimit, getBinary(), "");
    }

    public static RemoteCall<AuctionUnfixedPrice> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AuctionUnfixedPrice.class, web3j, transactionManager, contractGasProvider, getBinary(), "");
    }

    @Deprecated
    public static RemoteCall<AuctionUnfixedPrice> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AuctionUnfixedPrice.class, web3j, transactionManager, gasPrice, gasLimit, getBinary(), "");
    }
}
